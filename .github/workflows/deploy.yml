name: Deploy EC2 Infrastructure and App

on:
  push:
    branches:
      - feature-development

env:
  AWS_REGION: us-east-2

jobs:
  deploy:
    name: Deploy EC2 via Terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Clean Workspace Before Start
      run: |
        echo "Cleaning workspace..."
        rm -rf *

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set Deployment Stage
      run: echo "STAGE=dev" >> $GITHUB_ENV

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      run: terraform init

    - name: Import Existing Resources (if any)
      run: |
        terraform import aws_s3_bucket.private_logs sonalizxcvbnm12345 || true
        terraform import aws_s3_bucket_versioning.private_logs_versioning sonalizxcvbnm12345 || true
        terraform import aws_s3_bucket_lifecycle_configuration.private_logs_lifecycle sonalizxcvbnm12345 || true

        terraform import aws_iam_role.s3_readonly_role s3-readonly-role || true
        terraform import aws_iam_role.s3_writeonly_role s3-writeonly-role || true
        terraform import aws_iam_policy.s3_readonly_policy arn:aws:iam::202991357943:policy/s3-readonly-policy || true
        terraform import aws_iam_policy.s3_writeonly_policy arn:aws:iam::202991357943:policy/s3-writeonly-policy || true
        terraform import aws_iam_instance_profile.writeonly_instance_profile writeonly-instance-profile || true

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve \
          -var="stage=${{ env.STAGE }}" \
          -var="instance_type=t2.micro"

    - name: Wait for EC2 Boot
      run: sleep 60

    - name: Health Check (Port 80)
      run: |
        PUBLIC_IP=$(terraform output -raw public_ip)
        echo "Checking http://$PUBLIC_IP"
        curl --fail --retry 10 --retry-delay 10 http://$PUBLIC_IP || exit 1

    - name: Cleanup on Failure
      if: failure()
      run: |
        echo "Pipeline failed. Cleaning up workspace..."
        rm -rf *
